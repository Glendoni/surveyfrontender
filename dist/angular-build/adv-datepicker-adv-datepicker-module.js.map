{"version":3,"sources":["webpack:///./node_modules/ic-datepicker/ic-datepicker.umd.js","webpack:///./node_modules/ic-datepicker/themes/theme-default.css","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/adv-datepicker-routing.module.ts","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/adv-datepicker.component.html","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/adv-datepicker.component.scss","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/adv-datepicker.component.ts","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/adv-datepicker.module.ts","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/datepicker-config-form/datepicker-config-form.component.html","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/datepicker-config-form/datepicker-config-form.component.scss","webpack:///./src/app/demo/ui-elements/ui-adv/adv-datepicker/datepicker-config-form/datepicker-config-form.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA,CAAC,KAA4D,oBAAoB,mBAAO,CAAC,iEAAe,GAAG,mBAAO,CAAC,uEAAiB,GAAG,mBAAO,CAAC,oEAAgB,GAAG,mBAAO,CAAC,+CAAQ;AAClL,CAAC,SAC8F;AAC/F,CAAC,qDAAqD;;AAEtD;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uCAAuC,cAAc,EAAE;AACvD;AACA;AACA;AACA,4BAA4B,wCAAwC;AACpE,4BAA4B,uCAAuC;AACnE,gCAAgC,uCAAuC;AACvE,gCAAgC;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2CAA2C,0BAA0B;AACrE,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,2CAA2C,0BAA0B;AACrE,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,4BAA4B,EAAE,UAAU,cAAc;AACtD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,wBAAwB;AAC7B;AACA;AACA;AACA;AACA,kDAAkD,WAAW;;AAE7D;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C,4CAA4C;AAC5C;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,EAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,yDAAyD;AACvF,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAA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","file":"adv-datepicker-adv-datepicker-module.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('moment')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms', 'moment'], factory) :\n\t(factory((global['ic-datepicker'] = {}),global.core,global.common,global.forms,global.moment));\n}(this, (function (exports,core,common,forms,moment) { 'use strict';\n\nmoment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;\n\nvar defaultDayQuickOptions = [\n    {\n        label: 'Today',\n        date: moment()\n    },\n    {\n        label: 'Tomorrow',\n        date: moment().add(1, 'day')\n    }\n];\nvar IcDatepickerOptions = (function () {\n    /**\n     * @param {?} options\n     * @param {?} icDatepickerService\n     */\n    function IcDatepickerOptions(options, icDatepickerService) {\n        this.icDatepickerService = icDatepickerService;\n        this.defaults = {\n            attrs: {\n                id: null,\n                name: null,\n                placeholder: null,\n                readonly: true,\n                tabindex: null\n            },\n            clearInvalidDates: true,\n            closeOnSelect: true,\n            customDayClasses: [],\n            dayQuickOptions: defaultDayQuickOptions,\n            defaultToYearSelect: false,\n            disableDayFn: function () { return false; },\n            disableWeekends: false,\n            displayFormat: 'L',\n            icons: {\n                nextMonth: { classes: ['chevron', 'chevron-right'] },\n                nextYears: { classes: ['chevron', 'chevron-down'] },\n                previousMonth: { classes: ['chevron', 'chevron-left'] },\n                previousYears: { classes: ['chevron', 'chevron-up'] }\n            },\n            inputClasses: [],\n            maxDate: undefined,\n            minDate: undefined,\n            modelType: 'moment',\n            position: 'bottom',\n            showAdjacentMonthDays: true,\n            showDayQuickOptions: true,\n            showEmptyRow: true,\n            stringModelFormat: 'YYYY-MM-DD'\n        };\n        if (options.attrs) {\n            this.attrs = {\n                id: options.attrs.id || this.defaults.attrs.id,\n                name: options.attrs.name || this.defaults.attrs.name,\n                placeholder: options.attrs.placeholder || this.defaults.attrs.placeholder,\n                readonly: options.attrs.readonly || this.defaults.attrs.readonly,\n                tabindex: options.attrs.tabindex || this.defaults.attrs.tabindex\n            };\n        }\n        else {\n            this.attrs = this.defaults.attrs;\n        }\n        if (options.icons) {\n            this.icons = {\n                nextMonth: options.icons.nextMonth || this.defaults.icons.nextMonth,\n                nextYears: options.icons.nextYears || this.defaults.icons.nextYears,\n                previousMonth: options.icons.previousMonth || this.defaults.icons.previousMonth,\n                previousYears: options.icons.previousYears || this.defaults.icons.previousYears\n            };\n        }\n        else {\n            this.icons = this.defaults.icons;\n        }\n        this.clearInvalidDates = (null == options.clearInvalidDates) ? this.defaults.clearInvalidDates : options.clearInvalidDates;\n        this.closeOnSelect = (null == options.closeOnSelect) ? this.defaults.closeOnSelect : options.closeOnSelect;\n        this.customDayClasses = options.customDayClasses || this.defaults.customDayClasses;\n        this.defaultToYearSelect = options.defaultToYearSelect || this.defaults.defaultToYearSelect;\n        this.disableDayFn = options.disableDayFn || this.defaults.disableDayFn;\n        this.disableWeekends = (null == options.disableWeekends) ? this.defaults.disableWeekends : options.disableWeekends;\n        this.displayFormat = options.displayFormat || this.defaults.displayFormat;\n        this.inputClasses = options.inputClasses || this.defaults.inputClasses;\n        this.maxDate = options.maxDate || this.defaults.maxDate;\n        this.minDate = options.minDate || this.defaults.minDate;\n        this.modelType = options.modelType || this.defaults.modelType;\n        this.position = options.position || this.defaults.position;\n        this.showAdjacentMonthDays = (null == options.showAdjacentMonthDays) ? this.defaults.showAdjacentMonthDays : options.showAdjacentMonthDays;\n        this.showDayQuickOptions = (null == options.showDayQuickOptions) ? this.defaults.showDayQuickOptions : options.showDayQuickOptions;\n        this.showEmptyRow = (null == options.showEmptyRow) ? this.defaults.showEmptyRow : options.showEmptyRow;\n        this.stringModelFormat = options.stringModelFormat || this.defaults.stringModelFormat;\n        this.dayQuickOptions = this.buildDayQuickOptions(options.dayQuickOptions || this.defaults.dayQuickOptions);\n    }\n    /**\n     * Converts an array of quick day selection options into Datepicker Day instances\n     *\n     * @param {?} options\n     * @return {?}\n     */\n    IcDatepickerOptions.prototype.buildDayQuickOptions = function (options) {\n        var _this = this;\n        options.map(function (option) {\n            option.isDisabled = _this.disableDayFn(option.date) ||\n                (_this.disableWeekends && [6, 7].indexOf(option.date.isoWeekday()) > -1);\n            option.datepickerDay = _this.icDatepickerService.buildDatepickerDay(option.date, _this, option.date);\n        });\n        return options;\n    };\n    return IcDatepickerOptions;\n}());\n\nvar IcDatepickerService = (function () {\n    function IcDatepickerService() {\n    }\n    /**\n     * Builds a single Datepicker day instance based on the provided moment object\n     *\n     * @param {?} day\n     * @param {?} options\n     * @param {?=} selectedDayMoment\n     * @return {?}\n     */\n    IcDatepickerService.prototype.buildDatepickerDay = function (day, options, selectedDayMoment) {\n        if (selectedDayMoment === void 0) { selectedDayMoment = null; }\n        var /** @type {?} */ isToday = day.isSame(moment(), 'day');\n        var /** @type {?} */ isWeekend = ([6, 7].indexOf(day.isoWeekday()) > -1);\n        var /** @type {?} */ isDisabled = options.disableDayFn(day);\n        var /** @type {?} */ isSelected = (!!selectedDayMoment && day.isSame(selectedDayMoment, 'day'));\n        var /** @type {?} */ classes = [];\n        if (!isDisabled && options.minDate) {\n            isDisabled = day.isBefore(options.minDate);\n        }\n        if (!isDisabled && options.maxDate) {\n            isDisabled = day.isAfter(options.maxDate);\n        }\n        options.customDayClasses.forEach(function (customDayClass) {\n            var /** @type {?} */ applyClass = customDayClass.callback(day);\n            if (applyClass) {\n                classes = classes.concat(customDayClass.classes);\n            }\n        });\n        return {\n            classes: classes,\n            formattedDate: day.format(options.displayFormat),\n            isDisabled: isDisabled,\n            isSelected: isSelected,\n            isToday: isToday,\n            isWeekend: isWeekend,\n            moment: day.clone()\n        };\n    };\n    /**\n     * Returns an array of Day objects representing the month of the provided Moment instance\n     *\n     * @param {?} month\n     * @param {?} options\n     * @param {?=} selectedDayMoment\n     * @return {?}\n     */\n    IcDatepickerService.prototype.buildCalendarMonth = function (month, options, selectedDayMoment) {\n        if (selectedDayMoment === void 0) { selectedDayMoment = null; }\n        var /** @type {?} */ period = month.clone().startOf('month');\n        var /** @type {?} */ periodDays = [];\n        var /** @type {?} */ periodEnd = period.clone().endOf('month');\n        var /** @type {?} */ dayNumber = period.isoWeekday();\n        var /** @type {?} */ endDays;\n        periodDays = periodDays.concat(this.buildPlaceholderDays(dayNumber - 1));\n        while (period.isSameOrBefore(periodEnd)) {\n            periodDays.push(this.buildDatepickerDay(period, options, selectedDayMoment));\n            period.add(1, 'day');\n        }\n        endDays = 7 - period.subtract(1, 'day').isoWeekday();\n        /*\n         * If the showEmptyRow config option is true, and If the number of rendered weeks is 5, pad the datepicker with\n         * an extra week to maintain a consistent component height. This is more important when the datepicker is\n         * positioned top, to ensure that the month toggle buttons do not move during use.\n         */\n        if (options.showEmptyRow) {\n            var /** @type {?} */ numRows = Math.ceil(periodDays.length / 7);\n            if (numRows < 6) {\n                endDays += (6 - numRows) * 7;\n            }\n        }\n        periodDays = periodDays.concat(this.buildPlaceholderDays(endDays));\n        return periodDays;\n    };\n    /**\n     * Builds the day label headers for the datepicker columns\n     *\n     * @return {?}\n     */\n    IcDatepickerService.prototype.buildDayLabels = function () {\n        var /** @type {?} */ labels = [];\n        var /** @type {?} */ momentObj = moment().startOf('isoWeek');\n        for (var /** @type {?} */ i = 0; i < 7; i++) {\n            labels.push(momentObj.format('dd'));\n            momentObj.add(1, 'day');\n        }\n        return labels;\n    };\n    /**\n     * Returns a boolean representing whether the provided date is valid\n     *\n     * @param {?} date\n     * @param {?} options\n     * @return {?}\n     */\n    IcDatepickerService.prototype.dateIsValid = function (date, options) {\n        var /** @type {?} */ isValid = date.isValid();\n        if (isValid && options.minDate) {\n            isValid = date.isSameOrAfter(options.minDate, 'day');\n        }\n        if (isValid && options.maxDate) {\n            isValid = date.isSameOrBefore(options.maxDate, 'day');\n        }\n        return isValid;\n    };\n    /**\n     * Build the provided number of placeholder days\n     *\n     * @param {?} quantity\n     * @return {?}\n     */\n    IcDatepickerService.prototype.buildPlaceholderDays = function (quantity) {\n        var /** @type {?} */ placeholderDays = [];\n        for (var /** @type {?} */ i = 0; i < quantity; i++) {\n            placeholderDays.push({\n                isPlaceholder: true,\n                moment: moment()\n            });\n        }\n        return placeholderDays;\n    };\n    return IcDatepickerService;\n}());\nIcDatepickerService.decorators = [\n    { type: core.Injectable },\n];\n/**\n * @nocollapse\n */\nIcDatepickerService.ctorParameters = function () { return []; };\n\nvar IcDatepickerComponent = (function () {\n    /**\n     * IcDatepickerComponent Constructor\n     *\n     * @param {?} icDatepickerService\n     * @param {?} renderer\n     * @param {?} element\n     */\n    function IcDatepickerComponent(icDatepickerService, renderer, element) {\n        var _this = this;\n        this.icDatepickerService = icDatepickerService;\n        this.renderer = renderer;\n        this.element = element;\n        this.options = {};\n        this.dateChange = new core.EventEmitter();\n        this.monthChange = new core.EventEmitter();\n        this.opened = new core.EventEmitter();\n        this.closed = new core.EventEmitter();\n        this.initialised = false;\n        this.isDisabled = false;\n        // Context variables provided to custom input templates\n        this.templateContext = {\n            getInputValue: function () {\n                return _this.getInputValue();\n            }\n        };\n        this.propagateTouch = function () { };\n        this.propagateChange = function () { };\n    }\n    /**\n     * On Component init\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.mergedOptions = new IcDatepickerOptions(this.options, this.icDatepickerService);\n        // @todo: calculate whether the selected month should display based on min/max dates. Set the initial view appropriately\n        this.selectedDay = null;\n        this.setCurrentPeriod(moment());\n        this.datepickerIsOpen = false;\n        this.dayLabels = this.icDatepickerService.buildDayLabels();\n        this.yearSelectMode = this.mergedOptions.defaultToYearSelect;\n        this.yearOptions = this.buildYearOptions();\n        this.toggleMonthToggles(this.currentPeriod);\n        this.documentClickEvent = this.renderer.listenGlobal('document', 'click', function (event) {\n            event.stopPropagation();\n            var /** @type {?} */ closeDatepicker = true;\n            var /** @type {?} */ isTarget = _this.element.nativeElement === event.target;\n            var /** @type {?} */ containsTarget = _this.element.nativeElement.contains(event.target);\n            if (!event.target || isTarget || containsTarget) {\n                closeDatepicker = false;\n            }\n            if (closeDatepicker) {\n                _this.closeDatepicker();\n            }\n        });\n        this.initialised = true;\n    };\n    /**\n     * On \\@Input() changes\n     *\n     * @param {?} changes\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.ngOnChanges = function (changes) {\n        if (this.initialised) {\n            this.mergedOptions = new IcDatepickerOptions(changes['options'].currentValue, this.icDatepickerService);\n            this.setCurrentPeriod(this.currentPeriod);\n            if (this.selectedDay) {\n                this.selectedDay = this.icDatepickerService.buildDatepickerDay(this.selectedDay.moment, this.mergedOptions, this.selectedDay.moment);\n                this.emitModelChange(this.selectedDay);\n            }\n            this.toggleMonthToggles(this.currentPeriod);\n        }\n    };\n    /**\n     * On Component destroy\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.ngOnDestroy = function () {\n        // Remove the body click event to prevent memory leaks\n        if (this.documentClickEvent) {\n            this.documentClickEvent();\n        }\n    };\n    /**\n     * Keyboard events\n     *\n     * @param {?} event\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.onKeyboardInput = function (event) {\n        var /** @type {?} */ month;\n        // Only allow keyboard navigation if the datepicker popup is open\n        if (!this.datepickerIsOpen) {\n            return;\n        }\n        switch (event.keyCode) {\n            // Esc\n            case 27:\n                this.closeDatepicker();\n                break;\n            // Left\n            case 37:\n                month = this.currentPeriod.clone().subtract(1, 'month');\n                if (this.monthIsValid(month)) {\n                    this.showMonth('previous');\n                }\n                break;\n            // Right\n            case 39:\n                month = this.currentPeriod.clone().add(1, 'month');\n                if (this.monthIsValid(month)) {\n                    this.showMonth('next');\n                }\n                break;\n        }\n    };\n    /**\n     * Update the selected day when the model value is changed externally\n     *\n     * @param {?} value\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.writeValue = function (value) {\n        var _this = this;\n        if (!value) {\n            this.selectedDay = null;\n            return;\n        }\n        if (value !== this.selectedDay) {\n            if ('string' === typeof value) {\n                value = moment(value, this.mergedOptions.stringModelFormat);\n            }\n            if (value.isValid()) {\n                var /** @type {?} */ selectedMoment = this.selectedDay ? this.selectedDay.moment : null;\n                value = this.icDatepickerService.buildDatepickerDay(value, this.mergedOptions, selectedMoment);\n            }\n            else {\n                console.warn(\"Invalid model value \" + value + \" provided to the IcDatepickerComponent\");\n                return false;\n            }\n            var /** @type {?} */ isValid = true;\n            if (this.mergedOptions.minDate && value.moment.isBefore(this.mergedOptions.minDate)) {\n                isValid = false;\n            }\n            if (isValid) {\n                if (this.mergedOptions.maxDate && value.moment.isAfter(this.mergedOptions.maxDate)) {\n                    isValid = false;\n                }\n            }\n            if (!isValid) {\n                console.warn('Initial date falls beyond the configured minimum/maximum date');\n                if (this.mergedOptions.clearInvalidDates) {\n                    this.selectedDay = null;\n                    setTimeout(function () {\n                        _this.emitModelChange(null);\n                    });\n                }\n                return false;\n            }\n            this.selectedDay = value;\n            this.setCurrentPeriod(value.moment);\n            this.toggleMonthToggles(value.moment);\n            if (!isValid) {\n                console.warn('Date falls beyond the configured minimum/maximum date');\n                return false;\n            }\n        }\n    };\n    /**\n     * Register an On Change callback\n     *\n     * @param {?} fn\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.registerOnChange = function (fn) {\n        this.propagateChange = fn;\n    };\n    /**\n     * Register an On Touch callback\n     *\n     * @param {?} fn\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.registerOnTouched = function (fn) {\n        this.propagateTouch = fn;\n    };\n    /**\n     * Toggle the disabled state of the component\n     *\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.isDisabled = isDisabled;\n    };\n    /**\n     * Returns the value for display in the input field\n     *\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.getInputValue = function () {\n        var /** @type {?} */ value = '';\n        if (this.selectedDay && this.selectedDay.formattedDate) {\n            value = this.selectedDay.formattedDate;\n        }\n        return value;\n    };\n    /**\n     * Toggles the open state of the datepicker\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.toggleDatepicker = function () {\n        this.datepickerIsOpen = !this.datepickerIsOpen;\n        var /** @type {?} */ event = this.datepickerIsOpen ? this.opened : this.closed;\n        event.emit();\n    };\n    /**\n     * Closes the Datepicker\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.closeDatepicker = function () {\n        this.datepickerIsOpen = false;\n        this.closed.emit();\n    };\n    /**\n     * Toggles the displayed month\n     *\n     * @param {?} direction\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.showMonth = function (direction) {\n        var /** @type {?} */ originalValue = this.currentPeriod.clone();\n        var /** @type {?} */ updatedPeriod;\n        if ('next' === direction) {\n            updatedPeriod = this.currentPeriod.clone().add(1, 'month');\n        }\n        else {\n            updatedPeriod = this.currentPeriod.clone().subtract(1, 'month');\n        }\n        this.setCurrentPeriod(updatedPeriod);\n        this.toggleMonthToggles(updatedPeriod);\n        this.monthChange.emit({\n            previous: originalValue.startOf('month'),\n            value: updatedPeriod.clone().startOf('month')\n        });\n    };\n    /**\n     *\n     * @param {?} direction\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.showYears = function (direction) {\n        var /** @type {?} */ currentLastYear;\n        if ('next' === direction) {\n            currentLastYear = this.yearOptions[this.yearOptions.length - 1].moment.add(1, 'year');\n        }\n        else {\n            currentLastYear = this.yearOptions[0].moment.subtract(25, 'years');\n        }\n        this.yearOptions = this.buildYearOptions(currentLastYear);\n    };\n    /**\n     * Shows the Year selection panel\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.showYearSelectMode = function () {\n        this.yearOptions = this.buildYearOptions();\n        this.yearSelectMode = true;\n    };\n    /**\n     * Hides the Year selection panel\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.hideYearSelectMode = function () {\n        this.yearSelectMode = false;\n    };\n    /**\n     * Sets the internally tracked selected day to equal the provided day\n     *\n     * @param {?} day\n     * @param {?=} $event\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.setSelectedDay = function (day, $event) {\n        if ($event) {\n            $event.preventDefault();\n            $event.stopPropagation();\n        }\n        if (this.isDisabled || day.isPlaceholder || day.isDisabled) {\n            return false;\n        }\n        if (this.selectedDay && this.selectedDay.moment && day.moment && day.moment.isSame(this.selectedDay.moment)) {\n            return false;\n        }\n        if (!this.icDatepickerService.dateIsValid(day.moment, this.mergedOptions)) {\n            return false;\n        }\n        this.selectedDay = day;\n        if (day.moment) {\n            this.setCurrentPeriod(day.moment);\n        }\n        if (this.mergedOptions.closeOnSelect) {\n            this.closeDatepicker();\n        }\n        this.emitModelChange(day);\n    };\n    /**\n     *\n     * @param {?} year\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.setSelectedYear = function (year) {\n        var _this = this;\n        var /** @type {?} */ newDate = this.currentPeriod.format('DD/MM') + '/' + year.moment.format('YYYY');\n        var /** @type {?} */ newDateMoment = moment(newDate, 'DD/MM/YYYY');\n        if (moment.isMoment(this.mergedOptions.minDate) && newDateMoment.isBefore(this.mergedOptions.minDate)) {\n            newDateMoment = this.mergedOptions.minDate.clone();\n        }\n        else if (moment.isMoment(this.mergedOptions.maxDate) && newDateMoment.isAfter(this.mergedOptions.maxDate)) {\n            newDateMoment = this.mergedOptions.maxDate.clone();\n        }\n        this.setCurrentPeriod(newDateMoment);\n        this.hideYearSelectMode();\n        /*\n         Timeout is required to prevent the datepicker from closing when clicking a year due to\n         the year element from no longer existing at the point when the element.contains() check\n         is evaluated.\n         */\n        setTimeout(function () {\n            _this.yearOptions = _this.buildYearOptions();\n        });\n    };\n    /**\n     * Enables or disables the next/previous month toggles based on any provided min or max dates\n     *\n     * @param {?} updatedPeriod\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.toggleMonthToggles = function (updatedPeriod) {\n        this.previousMonthToggleActive = this.monthIsValid(updatedPeriod.clone().subtract(1, 'month'));\n        this.nextMonthToggleActive = this.monthIsValid(updatedPeriod.clone().add(1, 'month'));\n    };\n    /**\n     * Returns whether the provided month is valid based on optionally provided min/max dates\n     *\n     * @param {?} month\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.monthIsValid = function (month) {\n        var /** @type {?} */ valid = true;\n        if (moment.isMoment(this.mergedOptions.minDate)) {\n            valid = month.clone()\n                .endOf('month')\n                .isSameOrAfter(this.mergedOptions\n                .minDate\n                .clone()\n                .startOf('month'));\n        }\n        if (valid && moment.isMoment(this.mergedOptions.maxDate)) {\n            valid = month.clone()\n                .startOf('month')\n                .isSameOrBefore(this.mergedOptions\n                .maxDate\n                .clone()\n                .startOf('month'));\n        }\n        return valid;\n    };\n    /**\n     * Sets the currently rendered month period and generates the Day collection within that period\n     *\n     * @param {?} momentInstance\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.setCurrentPeriod = function (momentInstance) {\n        var /** @type {?} */ selectedDay = null;\n        if (this.selectedDay && this.selectedDay.moment) {\n            selectedDay = this.selectedDay.moment;\n        }\n        this.currentPeriod = momentInstance;\n        this.periodDays = this.icDatepickerService.buildCalendarMonth(this.currentPeriod.clone(), this.mergedOptions, selectedDay);\n        this.toggleMonthToggles(this.currentPeriod);\n    };\n    /**\n     * Builds the list of Year options for the Year select panel\n     *\n     * @param {?=} year\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.buildYearOptions = function (year) {\n        if (year === void 0) { year = this.currentPeriod.clone().subtract(12, 'years'); }\n        var /** @type {?} */ years = [];\n        var /** @type {?} */ end = year.clone().add(25, 'years');\n        while (year.isBefore(end)) {\n            var /** @type {?} */ isDisabled = false;\n            var /** @type {?} */ minDate = this.mergedOptions.minDate;\n            var /** @type {?} */ maxDate = this.mergedOptions.maxDate;\n            if ((minDate && year.isBefore(minDate, 'year')) ||\n                (maxDate && year.isAfter(maxDate, 'year'))) {\n                isDisabled = true;\n            }\n            years.push({\n                formatted: year.format('YYYY'),\n                isDisabled: isDisabled,\n                isSelected: year.isSame(this.currentPeriod, 'year'),\n                isThisYear: year.isSame(moment(), 'year'),\n                moment: year.clone()\n            });\n            year.add(1, 'year');\n        }\n        return years;\n    };\n    /**\n     * Emits a model change\n     *\n     * @param {?} day\n     * @return {?}\n     */\n    IcDatepickerComponent.prototype.emitModelChange = function (day) {\n        var /** @type {?} */ originalValue;\n        var /** @type {?} */ updatedValue = day;\n        switch (this.mergedOptions.modelType) {\n            case 'moment':\n                originalValue = this.selectedDay ? this.selectedDay.moment : null;\n                if (day) {\n                    updatedValue = day.moment;\n                }\n                break;\n            case 'IcDatepickerDay':\n                originalValue = this.selectedDay;\n                if (day) {\n                    updatedValue = day;\n                }\n                break;\n            case 'date':\n                originalValue = this.selectedDay ? this.selectedDay.moment.toDate() : null;\n                if (day) {\n                    updatedValue = day.moment.toDate();\n                }\n                break;\n            case 'string':\n                originalValue = this.selectedDay ? this.selectedDay.moment.format(this.mergedOptions.stringModelFormat) : null;\n                if (day) {\n                    updatedValue = day.moment.format(this.mergedOptions.stringModelFormat);\n                }\n                break;\n        }\n        // Inform change listeners of the change\n        this.propagateChange(updatedValue);\n        this.dateChange.emit({\n            previous: originalValue,\n            value: updatedValue\n        });\n    };\n    return IcDatepickerComponent;\n}());\nIcDatepickerComponent.decorators = [\n    { type: core.Component, args: [{\n                selector: 'ic-datepicker',\n                template: \"<div [class.ic-open]=\\\"datepickerIsOpen\\\" class=\\\"ic-datepicker-container\\\"> <div (click)=\\\"closeDatepicker()\\\" class=\\\"ic-datepicker-underlay\\\">&nbsp;</div> <!-- Datepicker toggle --> <div (click)=\\\"toggleDatepicker()\\\"> <ng-container *ngTemplateOutlet=\\\"inputTemplate ? inputTemplate : defaultInput; context: templateContext\\\" ></ng-container> </div> <!-- Datepicker popup --> <div [style.display]=\\\"datepickerIsOpen ? 'block' : 'none'\\\" [ngClass]=\\\"mergedOptions.position\\\" class=\\\"ic-datepicker\\\"> <div [style.display]=\\\"yearSelectMode ? 'none' : 'flex'\\\" class=\\\"ic-datepicker-header-bar\\\"> <button (click)=\\\"showMonth('previous')\\\" [style.visibility]=\\\"previousMonthToggleActive ? 'visible' : 'hidden'\\\" type=\\\"button\\\" class=\\\"cell action previous-month\\\" > <i [ngClass]=\\\"mergedOptions.icons.previousMonth.classes\\\"> {{ mergedOptions.icons.previousMonth.content }} </i> </button> <h3 (click)=\\\"showYearSelectMode()\\\" class=\\\"header-title\\\"> {{ currentPeriod.format('MMMM YYYY') }} </h3> <button (click)=\\\"showMonth('next')\\\" [style.visibility]=\\\"nextMonthToggleActive ? 'visible' : 'hidden'\\\" type=\\\"button\\\" class=\\\"cell action next-month\\\" > <i [ngClass]=\\\"mergedOptions.icons.nextMonth.classes\\\"> {{ mergedOptions.icons.nextMonth.content }} </i> </button> </div> <div [style.display]=\\\"yearSelectMode ? 'flex' : 'none'\\\" class=\\\"ic-datepicker-header-bar\\\"> <h3 class=\\\"header-title year-title\\\"> {{ yearOptions[0].formatted }} - {{ yearOptions[yearOptions.length - 1].formatted }} </h3> <button (click)=\\\"hideYearSelectMode()\\\" type=\\\"button\\\" class=\\\"cell action close-year-select\\\"> &times; </button> </div> <div [style.display]=\\\"yearSelectMode ? 'none' : 'block'\\\"> <div class=\\\"ic-datepicker-day-labels\\\"> <span *ngFor=\\\"let dayLabel of dayLabels\\\" class=\\\"cell day-label\\\"> {{ dayLabel }} </span> </div> <div class=\\\"ic-datepicker-dates\\\"> <button *ngFor=\\\"let day of periodDays\\\" (click)=\\\"setSelectedDay(day, $event)\\\" [ngClass]=\\\"day.classes\\\" [class.today]=\\\"day.isToday\\\" [class.selected]=\\\"day.isSelected\\\" [class.weekend]=\\\"day.isWeekend\\\" [class.placeholder]=\\\"day.isPlaceholder\\\" [disabled]=\\\"isDisabled || day.isPlaceholder || (day.isWeekend && mergedOptions.disableWeekends) || day.isDisabled\\\" type=\\\"button\\\" class=\\\"cell date\\\" > <span *ngIf=\\\"day.isPlaceholder\\\">&nbsp;</span> <span *ngIf=\\\"!day.isPlaceholder\\\"> {{ day.moment.format('D') }} </span> </button> </div> <div *ngIf=\\\"mergedOptions.showDayQuickOptions\\\" class=\\\"quick-options day-quick-options\\\"> <button *ngFor=\\\"let option of mergedOptions.dayQuickOptions\\\" [hidden]=\\\"option.isDisabled\\\" (click)=\\\"setSelectedDay(option.datepickerDay, $event)\\\" [ngClass]=\\\"{ selected: (selectedDay && option.date.isSame(selectedDay.moment, 'day')) }\\\" [disabled]=\\\"isDisabled\\\" type=\\\"button\\\" class=\\\"cell quick-option\\\" > {{ option.label }} </button> </div> </div> <div [style.display]=\\\"yearSelectMode ? 'block' : 'none'\\\" class=\\\"year-list\\\"> <div class=\\\"ic-datepicker-dates\\\"> <button (click)=\\\"showYears('previous')\\\" type=\\\"button\\\" class=\\\"cell toggle-years previous\\\"> <span> <i [ngClass]=\\\"mergedOptions.icons.previousYears.classes\\\"> {{ mergedOptions.icons.previousYears.content }} </i> </span> </button> <button *ngFor=\\\"let year of yearOptions\\\" (click)=\\\"setSelectedYear(year)\\\" [ngClass]=\\\"{ 'this-year': year.isThisYear, selected: year.isSelected }\\\" [disabled]=\\\"year.isDisabled\\\" type=\\\"button\\\" class=\\\"cell date year\\\" > {{ year.formatted }} </button> <button (click)=\\\"showYears('next')\\\" type=\\\"button\\\" class=\\\"cell toggle-years next\\\"> <span> <i [ngClass]=\\\"mergedOptions.icons.nextYears.classes\\\"> {{ mergedOptions.icons.nextYears.content }} </i> </span> </button> </div> </div> </div> <!-- Default --> <ng-template #defaultInput> <input [value]=\\\"getInputValue()\\\" [ngClass]=\\\"options.inputClasses\\\" [attr.id]=\\\"mergedOptions.attrs.id\\\" [attr.name]=\\\"mergedOptions.attrs.name\\\" [attr.placeholder]=\\\"mergedOptions.attrs.placeholder\\\" [attr.tabindex]=\\\"mergedOptions.attrs.tabindex\\\" [attr.readonly]=\\\"mergedOptions.attrs.readonly\\\" class=\\\"ic-datepicker-input\\\" type=\\\"text\\\" > </ng-template> </div> \",\n                styles: [\".ic-datepicker-container { position: relative; } .ic-datepicker-underlay { display: none; } @media (max-width: 480px) { .ic-open .ic-datepicker-underlay { display: block; position: fixed; top: 0; left: 0; height: 100vh; width: 100vh; background: rgba(0, 0, 0, 0.3); } } .ic-datepicker { position: absolute; width: 270px; z-index: 1000; -webkit-box-shadow: 0 0 10px 2px rgba(50, 50, 50, 0.3); -moz-box-shadow: 0 0 10px 2px rgba(50, 50, 50, 0.3); box-shadow: 0 0 10px 2px rgba(50, 50, 50, 0.3); } @media (max-width: 480px) { .ic-datepicker { position: fixed; bottom: 0; left: 0; transform-origin: 0 100%; width: 100%; width: 100vw; } } @media only screen and (min-width: 481px) { .ic-datepicker.top { transform-origin: 0 100%; bottom: 48px; } .ic-datepicker.bottom { top: 48px; } } .ic-datepicker .ic-datepicker-input, .ic-datepicker .ic-datepicker-input[readonly] { background-color: #fff; } .ic-datepicker .cell { user-select: none; width: calc(100% / 7); font-size: 14px; height: 38px; display: inline-block; text-align: center; font-weight: 300; border-width: 1px; border-style: solid; border-radius: 0; outline: none; box-sizing: border-box; } @media (max-width: 480px) { .ic-datepicker .cell { height: 44px; height: calc(100vw / 7); } } .ic-datepicker .cell[disabled]:hover { cursor: not-allowed; } .ic-datepicker .cell.year { width: calc(100% / 5); } .ic-datepicker .ic-datepicker-header-bar { display: flex; align-items: center; } .ic-datepicker .ic-datepicker-header-bar .action { background: transparent; border: none; outline: none; padding: 0; display: flex; justify-content: center; align-items: center; } .ic-datepicker .ic-datepicker-header-bar .header-title { text-align: center; text-transform: uppercase; margin: 0; padding-top: 4px; font-size: 15px; font-weight: 400; line-height: 34px; width: calc((100% / 7) * 5); -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } .ic-datepicker .ic-datepicker-header-bar .header-title.year-title { margin-left: calc(100% / 7); } .ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar .header-title:not(.year-title):hover, .ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar .cell.action:hover { cursor: pointer; } .ic-datepicker .ic-datepicker-year-select-options .close-year-select { display: block; } .ic-datepicker .ic-datepicker-day-labels .day-label { line-height: 38px; font-size: 12px; font-weight: 300; text-transform: uppercase; -webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; } ic-datepicker .ic-datepicker-dates .date { padding-top: 0; padding-bottom: 0; } .ic-datepicker .ic-datepicker-dates .date span { display: flex; align-content: center; justify-content: center; line-height: 34px; } .ic-datepicker .quick-options { text-align: center; } .ic-datepicker .quick-options .quick-option { width: calc(100% / 2); } .ic-datepicker .year-list .toggle-years { width: 100%; font-weight: 300; outline: none; display: flex; justify-content: center; align-items: center; } .ic-datepicker .year-list .toggle-years:hover { cursor: pointer; } .ic-datepicker .chevron::before { border-style: solid; border-width: 2px 2px 0 0; content: ''; display: inline-block; height: 10px; position: relative; top: 6px; transform: rotate(-45deg); vertical-align: top; width: 10px; } .ic-datepicker .chevron.chevron-up::before { position: relative; top: 8px; } .ic-datepicker .chevron.chevron-right::before { left: -2px; transform: rotate(45deg); } .ic-datepicker .chevron.chevron-down::before { position: relative; top: 3px; transform: rotate(135deg); } .ic-datepicker .chevron.chevron-left::before { left: 3px; transform: rotate(-135deg); } \"],\n                providers: [\n                    {\n                        provide: forms.NG_VALUE_ACCESSOR,\n                        useExisting: core.forwardRef(function () { return IcDatepickerComponent; }),\n                        multi: true\n                    }\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nIcDatepickerComponent.ctorParameters = function () { return [\n    { type: IcDatepickerService, decorators: [{ type: core.Inject, args: [IcDatepickerService,] },] },\n    { type: core.Renderer, decorators: [{ type: core.Inject, args: [core.Renderer,] },] },\n    { type: core.ElementRef, decorators: [{ type: core.Inject, args: [core.ElementRef,] },] },\n]; };\nIcDatepickerComponent.propDecorators = {\n    'inputTemplate': [{ type: core.Input },],\n    'options': [{ type: core.Input },],\n    'dateChange': [{ type: core.Output },],\n    'monthChange': [{ type: core.Output },],\n    'opened': [{ type: core.Output },],\n    'closed': [{ type: core.Output },],\n    'onKeyboardInput': [{ type: core.HostListener, args: ['window:keydown', ['$event'],] },],\n};\n\nvar IcDatepickerModule = (function () {\n    function IcDatepickerModule() {\n    }\n    /**\n     * @return {?}\n     */\n    IcDatepickerModule.forRoot = function () {\n        return {\n            ngModule: IcDatepickerModule,\n            providers: [IcDatepickerService]\n        };\n    };\n    return IcDatepickerModule;\n}());\nIcDatepickerModule.decorators = [\n    { type: core.NgModule, args: [{\n                imports: [\n                    common.CommonModule\n                ],\n                declarations: [\n                    IcDatepickerComponent,\n                ],\n                exports: [\n                    IcDatepickerComponent,\n                ]\n            },] },\n];\n/**\n * @nocollapse\n */\nIcDatepickerModule.ctorParameters = function () { return []; };\n\nexports.IcDatepickerModule = IcDatepickerModule;\nexports.IcDatepickerComponent = IcDatepickerComponent;\nexports.IcDatepickerService = IcDatepickerService;\nexports.defaultDayQuickOptions = defaultDayQuickOptions;\nexports.IcDatepickerOptions = IcDatepickerOptions;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n","module.exports = \".ic-datepicker-container > input[readonly] {\\n  background: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker {\\n  background: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar {\\n    background: #546A76;\\n    color: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar .header-title:not(.year-title):hover, .ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar .cell.action:hover {\\n      background: #3f4f58; }\\n\\n.ic-datepicker-container .ic-datepicker .ic-datepicker-header-bar .action {\\n      color: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker .cell {\\n    background: #fff;\\n    color: #484848;\\n    border-color: #f0f0f0; }\\n\\n.ic-datepicker-container .ic-datepicker .cell.selected {\\n      background: #546A76;\\n      color: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker .cell:not([disabled]):not(.selected):not(.day-label):hover {\\n      background: #3f4f58;\\n      color: #fff;\\n      cursor: pointer; }\\n\\n.ic-datepicker-container .ic-datepicker .date.placeholder {\\n    background: #fafafa; }\\n\\n.ic-datepicker-container .ic-datepicker .date[disabled]:not(.placeholder) {\\n    background: #f3f3f3;\\n    color: #909090; }\\n\\n.ic-datepicker-container .ic-datepicker .date.today:not(.selected), .ic-datepicker-container .ic-datepicker .date.this-year:not(.selected) {\\n    color: #546A76; }\\n\\n.ic-datepicker-container .ic-datepicker .date.today:not(.selected):not([disabled]), .ic-datepicker-container .ic-datepicker .date.this-year:not(.selected):not([disabled]) {\\n      background: #fff; }\\n\\n.ic-datepicker-container .ic-datepicker .year-list .toggle-years {\\n    color: #484848; }\\n\\n.ic-datepicker-container .ic-datepicker .year-list .toggle-years:hover {\\n      border: none; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9pYy1kYXRlcGlja2VyL3RoZW1lcy90aGVtZS1kZWZhdWx0LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGdCQUFnQixFQUFFOztBQUVwQjtFQUNFLGdCQUFnQixFQUFFOztBQUNsQjtJQUNFLG1CQUFtQjtJQUNuQixXQUFXLEVBQUU7O0FBQ2I7TUFDRSxtQkFBbUIsRUFBRTs7QUFDdkI7TUFDRSxXQUFXLEVBQUU7O0FBQ2pCO0lBQ0UsZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxxQkFBcUIsRUFBRTs7QUFDdkI7TUFDRSxtQkFBbUI7TUFDbkIsV0FBVyxFQUFFOztBQUNmO01BQ0UsbUJBQW1CO01BQ25CLFdBQVc7TUFDWCxlQUFlLEVBQUU7O0FBQ3JCO0lBQ0UsbUJBQW1CLEVBQUU7O0FBQ3ZCO0lBQ0UsbUJBQW1CO0lBQ25CLGNBQWMsRUFBRTs7QUFDbEI7SUFDRSxjQUFjLEVBQUU7O0FBQ2hCO01BQ0UsZ0JBQWdCLEVBQUU7O0FBQ3RCO0lBQ0UsY0FBYyxFQUFFOztBQUNoQjtNQUNFLFlBQVksRUFBRSIsImZpbGUiOiJub2RlX21vZHVsZXMvaWMtZGF0ZXBpY2tlci90aGVtZXMvdGhlbWUtZGVmYXVsdC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgPiBpbnB1dFtyZWFkb25seV0ge1xuICBiYWNrZ3JvdW5kOiAjZmZmOyB9XG5cbi5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciB7XG4gIGJhY2tncm91bmQ6ICNmZmY7IH1cbiAgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5pYy1kYXRlcGlja2VyLWhlYWRlci1iYXIge1xuICAgIGJhY2tncm91bmQ6ICM1NDZBNzY7XG4gICAgY29sb3I6ICNmZmY7IH1cbiAgICAuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgLmljLWRhdGVwaWNrZXIgLmljLWRhdGVwaWNrZXItaGVhZGVyLWJhciAuaGVhZGVyLXRpdGxlOm5vdCgueWVhci10aXRsZSk6aG92ZXIsIC5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciAuaWMtZGF0ZXBpY2tlci1oZWFkZXItYmFyIC5jZWxsLmFjdGlvbjpob3ZlciB7XG4gICAgICBiYWNrZ3JvdW5kOiAjM2Y0ZjU4OyB9XG4gICAgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5pYy1kYXRlcGlja2VyLWhlYWRlci1iYXIgLmFjdGlvbiB7XG4gICAgICBjb2xvcjogI2ZmZjsgfVxuICAuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgLmljLWRhdGVwaWNrZXIgLmNlbGwge1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgY29sb3I6ICM0ODQ4NDg7XG4gICAgYm9yZGVyLWNvbG9yOiAjZjBmMGYwOyB9XG4gICAgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5jZWxsLnNlbGVjdGVkIHtcbiAgICAgIGJhY2tncm91bmQ6ICM1NDZBNzY7XG4gICAgICBjb2xvcjogI2ZmZjsgfVxuICAgIC5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciAuY2VsbDpub3QoW2Rpc2FibGVkXSk6bm90KC5zZWxlY3RlZCk6bm90KC5kYXktbGFiZWwpOmhvdmVyIHtcbiAgICAgIGJhY2tncm91bmQ6ICMzZjRmNTg7XG4gICAgICBjb2xvcjogI2ZmZjtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjsgfVxuICAuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgLmljLWRhdGVwaWNrZXIgLmRhdGUucGxhY2Vob2xkZXIge1xuICAgIGJhY2tncm91bmQ6ICNmYWZhZmE7IH1cbiAgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5kYXRlW2Rpc2FibGVkXTpub3QoLnBsYWNlaG9sZGVyKSB7XG4gICAgYmFja2dyb3VuZDogI2YzZjNmMztcbiAgICBjb2xvcjogIzkwOTA5MDsgfVxuICAuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgLmljLWRhdGVwaWNrZXIgLmRhdGUudG9kYXk6bm90KC5zZWxlY3RlZCksIC5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciAuZGF0ZS50aGlzLXllYXI6bm90KC5zZWxlY3RlZCkge1xuICAgIGNvbG9yOiAjNTQ2QTc2OyB9XG4gICAgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5kYXRlLnRvZGF5Om5vdCguc2VsZWN0ZWQpOm5vdChbZGlzYWJsZWRdKSwgLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyIC5kYXRlLnRoaXMteWVhcjpub3QoLnNlbGVjdGVkKTpub3QoW2Rpc2FibGVkXSkge1xuICAgICAgYmFja2dyb3VuZDogI2ZmZjsgfVxuICAuaWMtZGF0ZXBpY2tlci1jb250YWluZXIgLmljLWRhdGVwaWNrZXIgLnllYXItbGlzdCAudG9nZ2xlLXllYXJzIHtcbiAgICBjb2xvcjogIzQ4NDg0ODsgfVxuICAgIC5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciAueWVhci1saXN0IC50b2dnbGUteWVhcnM6aG92ZXIge1xuICAgICAgYm9yZGVyOiBub25lOyB9XG4iXX0= */\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AdvDatepickerComponent} from './adv-datepicker.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdvDatepickerComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdvDatepickerRoutingModule { }\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <app-card cardTitle=\\\"Datepicker\\\" [options]=\\\"false\\\">\\n      <div *ngIf=\\\"exampleDatepickerConfig\\\">\\n        <div class=\\\"align-items-center full-height\\\">\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-4\\\"></div>\\n            <div class=\\\"col-md-4\\\">\\n              <form [formGroup]=\\\"exampleDatepickerForm\\\" (ngSubmit)=\\\"onSubmit(exampleDatepickerForm)\\\" [ngSwitch]=\\\"exampleDatepickerConfig.inputTemplate\\\">\\n                <ic-datepicker *ngSwitchCase=\\\"'bootstrap'\\\" formControlName=\\\"datepicker\\\" [inputTemplate]=\\\"bootstrapInputTemplate\\\" [options]=\\\"exampleDatepickerConfig\\\"></ic-datepicker>\\n                <ic-datepicker *ngSwitchCase=\\\"'html'\\\" formControlName=\\\"datepicker\\\" [inputTemplate]=\\\"htmlInputTemplate\\\" [options]=\\\"exampleDatepickerConfig\\\"></ic-datepicker>\\n                <ic-datepicker *ngSwitchDefault formControlName=\\\"datepicker\\\" [options]=\\\"exampleDatepickerConfig\\\"></ic-datepicker>\\n                <button (click)=\\\"clearDatepicker()\\\" type=\\\"button\\\" class=\\\"btn btn-block btn-secondary mt-2\\\">Clear</button>\\n              </form>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n      <hr>\\n      <div class=\\\"config-form-wrapper\\\">\\n        <app-datepicker-config-form [exampleDatepickerConfig]=\\\"exampleDatepickerConfig\\\" (onConfigChanged)=\\\"onConfigChanged($event)\\\"></app-datepicker-config-form>\\n      </div>\\n\\n      <div class=\\\"row\\\">\\n        <!-- Bootstrap  -->\\n        <ng-template #bootstrapInputTemplate let-inputValue=\\\"getInputValue()\\\">\\n          <div class=\\\"form-group\\\">\\n            <div class=\\\"input-group\\\">\\n              <input [value]=\\\"inputValue\\\" id=\\\"my-datepicker\\\" type=\\\"text\\\" class=\\\"form-control\\\">\\n              <div class=\\\"input-group-append\\\">\\n                <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-calendar\\\"></i></span>\\n              </div>\\n            </div>\\n          </div>\\n        </ng-template>\\n\\n        <!-- Non-Input -->\\n        <ng-template #htmlInputTemplate let-inputValue=\\\"getInputValue()\\\">\\n          <p class=\\\"alert alert-success text-center\\\">\\n            <span *ngIf=\\\"inputValue\\\">\\n              You have selected: {{ inputValue }}\\n            </span>\\n            <span *ngIf=\\\"!inputValue\\\">Click to select a date</span>\\n          </p>\\n        </ng-template>\\n      </div>\\n    </app-card>\\n  </div>\\n</div>\\n\"","module.exports = \".ic-datepicker-container .ic-datepicker.bottom {\\n  top: 40px !important; }\\n\\n.ic-datepicker-container .ic-datepicker .cell.even {\\n  background: #1dd5d2; }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9nbGVuZG9uc21hbGwvRGVza3RvcC9XQjAyNzUyMzkvVGVtcGxhdGUvZnVsbC12ZXJzaW9uL3NyYy9hcHAvZGVtby91aS1lbGVtZW50cy91aS1hZHYvYWR2LWRhdGVwaWNrZXIvYWR2LWRhdGVwaWNrZXIuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxvQkFBb0IsRUFBQTs7QUFHdEI7RUFDRSxtQkFBbUIsRUFBQSIsImZpbGUiOiJzcmMvYXBwL2RlbW8vdWktZWxlbWVudHMvdWktYWR2L2Fkdi1kYXRlcGlja2VyL2Fkdi1kYXRlcGlja2VyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmljLWRhdGVwaWNrZXItY29udGFpbmVyIC5pYy1kYXRlcGlja2VyLmJvdHRvbSB7XHJcbiAgdG9wOiA0MHB4ICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi5pYy1kYXRlcGlja2VyLWNvbnRhaW5lciAuaWMtZGF0ZXBpY2tlciAuY2VsbC5ldmVuIHtcclxuICBiYWNrZ3JvdW5kOiAjMWRkNWQyO1xyXG59XHJcbiJdfQ== */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup} from '@angular/forms';\nimport * as moment from 'moment';\n\n@Component({\n  selector: 'app-adv-datepicker',\n  templateUrl: './adv-datepicker.component.html',\n  styleUrls: [\n    './adv-datepicker.component.scss',\n    '../../../../../../node_modules/ic-datepicker/themes/theme-default.css'\n  ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class AdvDatepickerComponent implements OnInit {\n  displayDate: any;\n  exampleDatepickerForm: FormGroup;\n  exampleDatepickerConfig: any;\n  iconSets = {\n    svg: {\n      nextMonth: { classes: ['chevron', 'chevron-right'] },\n      nextYears: { classes: ['chevron', 'chevron-down'] },\n      previousMonth: { classes: ['chevron', 'chevron-left'] },\n      previousYears: { classes: ['chevron', 'chevron-up'] }\n    },\n    fontAwesome: {\n      nextMonth: { classes: ['fa', 'fa-chevron-right'] },\n      nextYears: { classes: ['fa', 'fa-chevron-down'] },\n      previousMonth: { classes: ['fa', 'fa-chevron-left'] },\n      previousYears: { classes: ['fa', 'fa-chevron-up'] }\n    },\n    material: {\n      nextMonth: {\n        classes: ['material-icons'],\n        content: 'chevron_right'\n      },\n      nextYears: {\n        classes: ['material-icons'],\n        content: 'keyboard_arrow_down'\n      },\n      previousMonth: {\n        classes: ['material-icons'],\n        content: 'chevron_left'\n      },\n      previousYears: {\n        classes: ['material-icons'],\n        content: 'keyboard_arrow_up'\n      }\n    }\n  };\n\n  constructor(private formBuilder: FormBuilder) {}\n\n  ngOnInit() {\n    this.exampleDatepickerConfig = {\n      attrs: {\n        id: 'example-datepicker'\n      },\n      clearInvalidDates: true,\n      closeOnSelect: true,\n      customDayClasses: [],\n      disableWeekends: false,\n      displayFormat: 'L',\n      iconSet: 'svg',\n      inputClasses: [],\n      inputTemplate: 'bootstrap',\n      maxDate: moment().add(6, 'month'),\n      minDate: moment().subtract(6, 'month'),\n      modelType: 'string',\n      position: 'bottom',\n      showDayQuickOptions: true,\n      showEmptyRow: true,\n      stringModelFormat: 'YYYY-MM-DD'\n    };\n\n    this.exampleDatepickerForm = this.formBuilder.group({\n      datepicker: new FormControl({\n        value: moment().add(3, 'months').format('YYYY-MM-DD'),\n        disabled: false\n      })\n    });\n\n    const dateChange$ = this.exampleDatepickerForm.get('datepicker').valueChanges;\n\n    dateChange$.subscribe((date) => {\n      this.displayDate = date;\n    });\n  }\n\n  onConfigChanged($event) {\n    setTimeout(() => {\n      const datepicker = this.exampleDatepickerForm.get('datepicker');\n      const config = this.buildEventConfig($event.config);\n\n      if (config.disableDatepicker) {\n        datepicker.disable();\n      } else {\n        datepicker.enable();\n      }\n\n      if (config.highlightEvenDays) {\n        config.customDayClasses = [{\n          classes: ['even'],\n          callback: (momentInstance) => {\n            return (parseInt(momentInstance.format('DD'), 10) % 2) === 0;\n          }\n        }];\n      }\n\n      this.exampleDatepickerConfig = config;\n    });\n  }\n\n  buildEventConfig(config) {\n    let icons = this.iconSets.svg;\n\n    if (this.iconSets[config.iconSet]) {\n      icons = this.iconSets[config.iconSet];\n    }\n\n    config.icons = icons;\n\n    return config;\n  }\n\n  onSubmit(form) {\n  }\n\n  clearDatepicker() {\n    this.exampleDatepickerForm.patchValue({\n      datepicker: null\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdvDatepickerRoutingModule } from './adv-datepicker-routing.module';\nimport { AdvDatepickerComponent } from './adv-datepicker.component';\nimport {IcDatepickerModule, IcDatepickerService} from 'ic-datepicker';\nimport {SharedModule} from '../../../../theme/shared/shared.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {NgbButtonsModule} from '@ng-bootstrap/ng-bootstrap';\nimport { DatepickerConfigFormComponent } from './datepicker-config-form/datepicker-config-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdvDatepickerRoutingModule,\n    SharedModule,\n    IcDatepickerModule,\n    FormsModule,\n    ReactiveFormsModule,\n    NgbButtonsModule\n  ],\n  declarations: [AdvDatepickerComponent, DatepickerConfigFormComponent],\n  providers: [IcDatepickerService]\n})\nexport class AdvDatepickerModule { }\n","module.exports = \"<form *ngIf=\\\"configForm\\\" [formGroup]=\\\"configForm\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-6\\\">\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-sm-3 col-form-label col-form-label-sm\\\">Input Template</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <div class=\\\"radio d-inline\\\" *ngFor=\\\"let template of inputTemplateOptions\\\">\\n            <input type=\\\"radio\\\" checked formControlName=\\\"inputTemplate\\\" [value]=\\\"template.value\\\" id=\\\"template-{{ template.value }}\\\">\\n            <label for=\\\"template-{{ template.value }}\\\" class=\\\"cr\\\">{{ template.label }}</label>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-sm-3 col-form-label col-form-label-sm\\\">Icons</label>\\n        <div class=\\\"col-sm-9\\\">\\n          <div class=\\\"radio d-inline\\\" *ngFor=\\\"let iconSet of iconSets\\\">\\n            <input type=\\\"radio\\\" checked formControlName=\\\"iconSet\\\" [value]=\\\"iconSet.value\\\" id=\\\"icons-{{ iconSet.value }}\\\">\\n            <label for=\\\"icons-{{ iconSet.value }}\\\" class=\\\"cr\\\">{{ iconSet.label }}</label>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"closeOnSelect\\\" id=\\\"checkbox-1\\\" checked>\\n          <label for=\\\"checkbox-1\\\" class=\\\"cr\\\">Close when a date is selected</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"disableWeekends\\\" id=\\\"checkbox-2\\\" checked>\\n          <label for=\\\"checkbox-2\\\" class=\\\"cr\\\">Disable selection of weekend days</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"highlightEvenDays\\\" id=\\\"checkbox-3\\\" checked>\\n          <label for=\\\"checkbox-3\\\" class=\\\"cr\\\">Highlight even days</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"disableDatepicker\\\" id=\\\"checkbox-4\\\" checked>\\n          <label for=\\\"checkbox-4\\\" class=\\\"cr\\\">Toggle disabled</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"showDayQuickOptions\\\" id=\\\"checkbox-5\\\" checked>\\n          <label for=\\\"checkbox-5\\\" class=\\\"cr\\\">Show Quick Day Options</label>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"form-group mt-3\\\">\\n        <div class=\\\"checkbox d-inline\\\">\\n          <input type=\\\"checkbox\\\" formControlName=\\\"showEmptyRow\\\" id=\\\"checkbox-6\\\" checked>\\n          <label for=\\\"checkbox-6\\\" class=\\\"cr\\\">Show Empty Row</label>\\n        </div>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"col-sm-6\\\">\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-sm-2 col-form-label col-form-label-sm\\\">Display Format</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <select  class=\\\"form-control\\\" formControlName=\\\"displayFormat\\\" name=\\\"display-format\\\" id=\\\"display-format\\\">\\n            <option *ngFor=\\\"let option of displayFormatOptions\\\" [value]=\\\"option\\\">\\n              {{ option }}\\n            </option>\\n          </select>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n        <label class=\\\"col-sm-2 col-form-label col-form-label-sm\\\">Datepicker Position</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <select  class=\\\"form-control\\\" formControlName=\\\"position\\\" name=\\\"position\\\" id=\\\"position\\\">\\n            <option *ngFor=\\\"let option of positionOptions\\\" [value]=\\\"option\\\">\\n              {{ option }}\\n            </option>\\n          </select>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n        <div class=\\\"col\\\">\\n          <label>\\n            Min (Earliest) Date<br>\\n          </label>\\n          <ic-datepicker formControlName=\\\"minDate\\\" [options]=\\\"minDateOptions\\\"></ic-datepicker>\\n        </div>\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n        <div class=\\\"col\\\">\\n          <label>\\n            Max (Latest) Date<br>\\n          </label>\\n          <ic-datepicker formControlName=\\\"maxDate\\\" [options]=\\\"maxDateOptions\\\"></ic-datepicker>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlbW8vdWktZWxlbWVudHMvdWktYWR2L2Fkdi1kYXRlcGlja2VyL2RhdGVwaWNrZXItY29uZmlnLWZvcm0vZGF0ZXBpY2tlci1jb25maWctZm9ybS5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-datepicker-config-form',\n  templateUrl: './datepicker-config-form.component.html',\n  styleUrls: ['./datepicker-config-form.component.scss']\n})\nexport class DatepickerConfigFormComponent implements OnInit, OnChanges {\n  @Input() exampleDatepickerConfig;\n  @Output() onConfigChanged = new EventEmitter();\n\n  configForm: FormGroup;\n  displayFormatOptions = ['L', 'LL', 'DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD'];\n  iconSets = [{\n    value: 'svg',\n    label: 'Default (SVG)'\n  }, {\n    value: 'fontAwesome',\n    label: 'Font Awesome'\n  }];\n  inputTemplateOptions = [{\n    value: 'bootstrap',\n    label: 'Bootstrap'\n  }, {\n    value: 'html',\n    label: 'HTML Element'\n  }, {\n    value: null,\n    label: 'Default (Unstyled)'\n  }];\n  minDateOptions: any;\n  maxDateOptions: any;\n  positionOptions: string[];\n\n  constructor() { }\n\n  ngOnInit() {\n    this.minDateOptions = {\n      attrs: {\n        id: 'min-date',\n        placeholder: 'None Set'\n      },\n      inputClasses: ['form-control']\n    };\n    this.maxDateOptions = {\n      attrs: {\n        id: 'max-date',\n        placeholder: 'None Set'\n      },\n      inputClasses: ['form-control']\n    };\n    this.positionOptions = ['top', 'bottom'];\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const datepickerConfig = changes['exampleDatepickerConfig'].currentValue;\n    this.configForm = this.buildConfigForm(datepickerConfig);\n    this.subscribeToFormChanges();\n  }\n\n  private buildConfigForm(value) {\n    const configForm = new FormGroup({\n      closeOnSelect: new FormControl(),\n      disableDatepicker: new FormControl(),\n      disableWeekends: new FormControl(),\n      displayFormat: new FormControl(),\n      iconSet: new FormControl(),\n      inputTemplate: new FormControl(),\n      highlightEvenDays: new FormControl(),\n      maxDate: new FormControl(),\n      minDate: new FormControl(),\n      position: new FormControl(),\n      showDayQuickOptions: new FormControl(),\n      showEmptyRow: new FormControl(),\n      stringModelFormat: new FormControl()\n    });\n\n    configForm.patchValue(value);\n\n    return configForm;\n  }\n\n  private subscribeToFormChanges() {\n    const formChanges$ = this.configForm.valueChanges;\n\n    formChanges$.subscribe((formData) => {\n      this.onConfigChanged.emit({\n        config: formData\n      });\n    });\n  }\n\n}\n"],"sourceRoot":""}