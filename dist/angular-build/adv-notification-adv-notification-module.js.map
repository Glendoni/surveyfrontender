{"version":3,"sources":["webpack:///./node_modules/ng2-toasty/index.js","webpack:///./node_modules/ng2-toasty/src/shared.js","webpack:///./node_modules/ng2-toasty/src/toast.component.js","webpack:///./node_modules/ng2-toasty/src/toasty.component.js","webpack:///./node_modules/ng2-toasty/src/toasty.service.js","webpack:///./node_modules/ng2-toasty/src/toasty.utils.js","webpack:///./node_modules/rxjs-compat/_esm5/Subject.js","webpack:///./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification-routing.module.ts","webpack:///./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.component.html","webpack:///./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.component.scss","webpack:///./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.component.ts","webpack:///./src/app/demo/ui-elements/ui-adv/adv-notification/adv-notification.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACyC;AACM;AACV;AACE;AACD;AACT;AAC4B;AACF;AACX;AAC6C;AAClF;AACP,IAAI,gEAAY;AAChB,KAAK,UAAU,iEAAa,cAAc,wEAAoB,SAAS,gEAAY;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,sDAAQ;AACxB,8BAA8B,4DAAY;AAC1C,mCAAmC,mEAAc,EAAE,qEAAe,EAAE,wDAAY;AAChF,8BAA8B,mEAAc,EAAE,qEAAe;AAC7D;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA,CAAC;AACuB;;;;;;;;;;;;;ACtCxB;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACyD;AACpB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uBAAuB;AAC/C;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,kDAAI,UAAU,mBAAmB,IAAI;AACrD;AACA;AACA,+CAA+C;AAC/C,SAAS,OAAO,sEAAY,GAAG;AAC/B,MAAM;AACN;AACA,CAAC;AACuB;;;;;;;;;;;;;ACzBxB;AAAA;AAAA;AAAA;AACA;AACA;AACuE;AACvE;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA,mBAAmB,OAAO,mDAAK,EAAE;AACjC,6BAA6B,OAAO,oDAAM,yBAAyB;AACnE;AACA;AACA,CAAC;AACyB;;;;;;;;;;;;;ACjC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACiD;AACL;AACoC;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sCAAsC;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,+DAAe;AAC9C;AACA;AACA;AACA;AACA,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA;AACA,oCAAoC,+DAAe;AACnD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gEAAU;AACpD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,gEAAU;AAC5C;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,kDAAkD;AAClD,SAAS,OAAO,4DAAY,GAAG;AAC/B,SAAS,OAAO,6DAAa,GAAG;AAChC,MAAM;AACN;AACA,sBAAsB,OAAO,mDAAK,EAAE;AACpC;AACA;AACA,CAAC;AAC0B;;;;;;;;;;;;;ACpK3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAC2C;AACqB;AACzB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,EAAE;AAC5B;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA,CAAC;AACuB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,EAAE;AAC5B;AACA;AACA,4CAA4C,WAAW;AACvD;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU,EAAE;AAC5B;AACA;AACA,+CAA+C,WAAW;AAC1D;AACA,CAAC;AACuB;AACjB;AACP;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACsB;AAChB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAO;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8DAAQ,+BAA+B,8DAAQ;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gEAAU;AACpD,gDAAgD,gEAAU;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,gEAAU;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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","file":"adv-notification-adv-notification-module.js","sourcesContent":["// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from '@angular/common';\nexport * from './src/toasty.service';\nexport * from './src/toasty.component';\nexport * from './src/toast.component';\nexport * from './src/shared';\nimport { ToastyComponent } from './src/toasty.component';\nimport { ToastComponent } from './src/toast.component';\nimport { SafeHtmlPipe } from './src/shared';\nimport { ToastyService, ToastyConfig, toastyServiceFactory } from './src/toasty.service';\nexport var providers = [\n    ToastyConfig,\n    { provide: ToastyService, useFactory: toastyServiceFactory, deps: [ToastyConfig] }\n];\nvar ToastyModule = (function () {\n    function ToastyModule() {\n    }\n    ToastyModule.forRoot = function () {\n        return {\n            ngModule: ToastyModule,\n            providers: providers\n        };\n    };\n    ToastyModule.decorators = [\n        { type: NgModule, args: [{\n                    imports: [CommonModule],\n                    declarations: [ToastComponent, ToastyComponent, SafeHtmlPipe],\n                    exports: [ToastComponent, ToastyComponent],\n                    providers: providers\n                },] },\n    ];\n    /** @nocollapse */\n    ToastyModule.ctorParameters = function () { return []; };\n    return ToastyModule;\n}());\nexport { ToastyModule };\n","// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Pipe } from '@angular/core';\nvar SafeHtmlPipe = (function () {\n    function SafeHtmlPipe(domSanitized) {\n        this.domSanitized = domSanitized;\n    }\n    SafeHtmlPipe.prototype.transform = function (value) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return this.domSanitized.bypassSecurityTrustHtml(value);\n    };\n    SafeHtmlPipe.decorators = [\n        { type: Pipe, args: [{ name: 'safeHtml' },] },\n    ];\n    /** @nocollapse */\n    SafeHtmlPipe.ctorParameters = function () { return [\n        { type: DomSanitizer, },\n    ]; };\n    return SafeHtmlPipe;\n}());\nexport { SafeHtmlPipe };\n","// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n/**\n * A Toast component shows message with title and close button.\n */\nvar ToastComponent = (function () {\n    function ToastComponent() {\n        this.closeToastEvent = new EventEmitter();\n    }\n    /**\n     * Event handler invokes when user clicks on close button.\n     * This method emit new event into ToastyContainer to close it.\n     */\n    ToastComponent.prototype.close = function ($event) {\n        $event.preventDefault();\n        this.closeToastEvent.next(this.toast);\n    };\n    ToastComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ng2-toast',\n                    template: \"\\n        <div class=\\\"toast\\\" [ngClass]=\\\"[toast.type, toast.theme]\\\">\\n            <div *ngIf=\\\"toast.showClose\\\" class=\\\"close-button\\\" (click)=\\\"close($event)\\\"></div>\\n            <div *ngIf=\\\"toast.title || toast.msg\\\" class=\\\"toast-text\\\">\\n                <span *ngIf=\\\"toast.title\\\" class=\\\"toast-title\\\" [innerHTML]=\\\"toast.title | safeHtml\\\"></span>\\n                <br *ngIf=\\\"toast.title && toast.msg\\\" />\\n                <span *ngIf=\\\"toast.msg\\\" class=\\\"toast-msg\\\" [innerHtml]=\\\"toast.msg | safeHtml\\\"></span>\\n            </div>\\n        </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    ToastComponent.ctorParameters = function () { return []; };\n    ToastComponent.propDecorators = {\n        'toast': [{ type: Input },],\n        'closeToastEvent': [{ type: Output, args: ['closeToast',] },],\n    };\n    return ToastComponent;\n}());\nexport { ToastComponent };\n","// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Component, Input } from '@angular/core';\nimport { isFunction } from './toasty.utils';\nimport { ToastyService, ToastyConfig, ToastyEventType } from './toasty.service';\n/**\n * Toasty is container for Toast components\n */\nvar ToastyComponent = (function () {\n    function ToastyComponent(config, toastyService) {\n        this.config = config;\n        this.toastyService = toastyService;\n        this._position = '';\n        // The storage for toasts.\n        this.toasts = [];\n        // Initialise position\n        this.position = '';\n    }\n    Object.defineProperty(ToastyComponent.prototype, \"position\", {\n        get: function () {\n            return this._position;\n        },\n        // The window position where the toast pops up. Possible values:\n        // - bottom-right (default value from ToastConfig)\n        // - bottom-left\n        // - top-right\n        // - top-left\n        // - top-center\n        // - bottom-center\n        // - center-center\n        set: function (value) {\n            if (value) {\n                var notFound = true;\n                for (var i = 0; i < ToastyComponent.POSITIONS.length; i++) {\n                    if (ToastyComponent.POSITIONS[i] === value) {\n                        notFound = false;\n                        break;\n                    }\n                }\n                if (notFound) {\n                    // Position was wrong - clear it here to use the one from config.\n                    value = this.config.position;\n                }\n            }\n            else {\n                value = this.config.position;\n            }\n            this._position = 'toasty-position-' + value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the\n     * first time, and before any of its children have been checked. It is invoked only once when the\n     * directive is instantiated.\n     */\n    ToastyComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // We listen events from our service\n        this.toastyService.events.subscribe(function (event) {\n            if (event.type === ToastyEventType.ADD) {\n                // Add the new one\n                var toast = event.value;\n                _this.add(toast);\n            }\n            else if (event.type === ToastyEventType.CLEAR) {\n                // Clear the one by number\n                var id = event.value;\n                _this.clear(id);\n            }\n            else if (event.type === ToastyEventType.CLEAR_ALL) {\n                // Lets clear all toasts\n                _this.clearAll();\n            }\n        });\n    };\n    /**\n     * Event listener of 'closeToast' event comes from ToastyComponent.\n     * This method removes ToastComponent assosiated with this Toast.\n     */\n    ToastyComponent.prototype.closeToast = function (toast) {\n        this.clear(toast.id);\n    };\n    /**\n     * Add new Toast\n     */\n    ToastyComponent.prototype.add = function (toast) {\n        // If we've gone over our limit, remove the earliest\n        // one from the array\n        if (this.toasts.length >= this.config.limit) {\n            this.toasts.shift();\n        }\n        // Add toasty to array\n        this.toasts.push(toast);\n        //\n        // If there's a timeout individually or globally,\n        // set the toast to timeout\n        if (toast.timeout) {\n            this._setTimeout(toast);\n        }\n    };\n    /**\n     * Clear individual toast by id\n     * @param id is unique identifier of Toast\n     */\n    ToastyComponent.prototype.clear = function (id) {\n        var _this = this;\n        if (id) {\n            this.toasts.forEach(function (value, key) {\n                if (value.id === id) {\n                    if (value.onRemove && isFunction(value.onRemove)) {\n                        value.onRemove.call(_this, value);\n                    }\n                    _this.toasts.splice(key, 1);\n                }\n            });\n        }\n        else {\n            throw new Error('Please provide id of Toast to close');\n        }\n    };\n    /**\n     * Clear all toasts\n     */\n    ToastyComponent.prototype.clearAll = function () {\n        var _this = this;\n        this.toasts.forEach(function (value, key) {\n            if (value.onRemove && isFunction(value.onRemove)) {\n                value.onRemove.call(_this, value);\n            }\n        });\n        this.toasts = [];\n    };\n    /**\n     * Custom setTimeout function for specific setTimeouts on individual toasts.\n     */\n    ToastyComponent.prototype._setTimeout = function (toast) {\n        var _this = this;\n        window.setTimeout(function () {\n            _this.clear(toast.id);\n        }, toast.timeout);\n    };\n    /**\n     * Set of constants defins position of Toasty on the page.\n     */\n    ToastyComponent.POSITIONS = ['bottom-right', 'bottom-left', 'top-right', 'top-left', 'top-center', 'bottom-center', 'center-center'];\n    ToastyComponent.decorators = [\n        { type: Component, args: [{\n                    selector: 'ng2-toasty',\n                    template: \"\\n    <div id=\\\"toasty\\\" [ngClass]=\\\"[position]\\\">\\n        <ng2-toast *ngFor=\\\"let toast of toasts\\\" [toast]=\\\"toast\\\" (closeToast)=\\\"closeToast(toast)\\\"></ng2-toast>\\n    </div>\"\n                },] },\n    ];\n    /** @nocollapse */\n    ToastyComponent.ctorParameters = function () { return [\n        { type: ToastyConfig, },\n        { type: ToastyService, },\n    ]; };\n    ToastyComponent.propDecorators = {\n        'position': [{ type: Input },],\n    };\n    return ToastyComponent;\n}());\nexport { ToastyComponent };\n","// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\nimport { Injectable } from '@angular/core';\nimport { isString, isNumber, isFunction } from './toasty.utils';\nimport { Subject } from 'rxjs/Subject';\n/**\n * Options to configure specific Toast\n */\nvar ToastOptions = (function () {\n    function ToastOptions() {\n    }\n    ToastOptions.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastOptions.ctorParameters = function () { return []; };\n    return ToastOptions;\n}());\nexport { ToastOptions };\n/**\n * Structrure of Toast\n */\nvar ToastData = (function () {\n    function ToastData() {\n    }\n    ToastData.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastData.ctorParameters = function () { return []; };\n    return ToastData;\n}());\nexport { ToastData };\n/**\n * Default configuration foa all toats and toasty container\n */\nvar ToastyConfig = (function () {\n    function ToastyConfig() {\n        // Maximum number of toasties to show at once\n        this.limit = 5;\n        // Whether to show the 'X' icon to close the toast\n        this.showClose = true;\n        // The window position where the toast pops up\n        this.position = 'bottom-right';\n        // How long (in miliseconds) the toasty shows before it's removed. Set to null/0 to turn off.\n        this.timeout = 5000;\n        // What theme to use\n        this.theme = 'default';\n    }\n    ToastyConfig.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastyConfig.ctorParameters = function () { return []; };\n    return ToastyConfig;\n}());\nexport { ToastyConfig };\nexport var ToastyEventType;\n(function (ToastyEventType) {\n    ToastyEventType[ToastyEventType[\"ADD\"] = 0] = \"ADD\";\n    ToastyEventType[ToastyEventType[\"CLEAR\"] = 1] = \"CLEAR\";\n    ToastyEventType[ToastyEventType[\"CLEAR_ALL\"] = 2] = \"CLEAR_ALL\";\n})(ToastyEventType || (ToastyEventType = {}));\nvar ToastyEvent = (function () {\n    function ToastyEvent(type, value) {\n        this.type = type;\n        this.value = value;\n    }\n    return ToastyEvent;\n}());\nexport { ToastyEvent };\nexport function toastyServiceFactory(config) {\n    return new ToastyService(config);\n}\n/**\n * Toasty service helps create different kinds of Toasts\n */\nvar ToastyService = (function () {\n    function ToastyService(config) {\n        this.config = config;\n        // Init the counter\n        this.uniqueCounter = 0;\n        // ToastData event emitter\n        // private toastsEmitter: EventEmitter<ToastData> = new EventEmitter<ToastData>();\n        // Clear event emitter\n        // private clearEmitter: EventEmitter<number> = new EventEmitter<number>();\n        this.eventSource = new Subject();\n        this.events = this.eventSource.asObservable();\n    }\n    /**\n     * Get list of toats\n     */\n    // getToasts(): Observable<ToastData> {\n    //   return this.toastsEmitter.asObservable();\n    // }\n    // getClear(): Observable<number> {\n    //   return this.clearEmitter.asObservable();\n    // }\n    /**\n     * Create Toast of a default type\n     */\n    ToastyService.prototype.default = function (options) {\n        this.add(options, 'default');\n    };\n    /**\n     * Create Toast of info type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.info = function (options) {\n        this.add(options, 'info');\n    };\n    /**\n     * Create Toast of success type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.success = function (options) {\n        this.add(options, 'success');\n    };\n    /**\n     * Create Toast of wait type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.wait = function (options) {\n        this.add(options, 'wait');\n    };\n    /**\n     * Create Toast of error type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.error = function (options) {\n        this.add(options, 'error');\n    };\n    /**\n     * Create Toast of warning type\n     * @param  {object} options Individual toasty config overrides\n     */\n    ToastyService.prototype.warning = function (options) {\n        this.add(options, 'warning');\n    };\n    // Add a new toast item\n    ToastyService.prototype.add = function (options, type) {\n        var toastyOptions;\n        if (isString(options) && options !== '' || isNumber(options)) {\n            toastyOptions = {\n                title: options.toString()\n            };\n        }\n        else {\n            toastyOptions = options;\n        }\n        if (!toastyOptions || !toastyOptions.title && !toastyOptions.msg) {\n            throw new Error('ng2-toasty: No toast title or message specified!');\n        }\n        type = type || 'default';\n        // Set a unique counter for an id\n        this.uniqueCounter++;\n        // Set the local vs global config items\n        var showClose = this._checkConfigItem(this.config, toastyOptions, 'showClose');\n        // If we have a theme set, make sure it's a valid one\n        var theme;\n        if (toastyOptions.theme) {\n            theme = ToastyService.THEMES.indexOf(toastyOptions.theme) > -1 ? toastyOptions.theme : this.config.theme;\n        }\n        else {\n            theme = this.config.theme;\n        }\n        var toast = {\n            id: this.uniqueCounter,\n            title: toastyOptions.title,\n            msg: toastyOptions.msg,\n            showClose: showClose,\n            type: 'toasty-type-' + type,\n            theme: 'toasty-theme-' + theme,\n            onAdd: toastyOptions.onAdd && isFunction(toastyOptions.onAdd) ? toastyOptions.onAdd : null,\n            onRemove: toastyOptions.onRemove && isFunction(toastyOptions.onRemove) ? toastyOptions.onRemove : null\n        };\n        // If there's a timeout individually or globally, set the toast to timeout\n        // Allows a caller to pass null/0 and override the default. Can also set the default to null/0 to turn off.\n        toast.timeout = toastyOptions.hasOwnProperty('timeout') ? toastyOptions.timeout : this.config.timeout;\n        // Push up a new toast item\n        // this.toastsSubscriber.next(toast);\n        // this.toastsEmitter.next(toast);\n        this.emitEvent(new ToastyEvent(ToastyEventType.ADD, toast));\n        // If we have a onAdd function, call it here\n        if (toastyOptions.onAdd && isFunction(toastyOptions.onAdd)) {\n            toastyOptions.onAdd.call(this, toast);\n        }\n    };\n    // Clear all toasts\n    ToastyService.prototype.clearAll = function () {\n        // this.clearEmitter.next(null);\n        this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR_ALL));\n    };\n    // Clear the specific one\n    ToastyService.prototype.clear = function (id) {\n        // this.clearEmitter.next(id);\n        this.emitEvent(new ToastyEvent(ToastyEventType.CLEAR, id));\n    };\n    // Checks whether the local option is set, if not,\n    // checks the global config\n    ToastyService.prototype._checkConfigItem = function (config, options, property) {\n        if (options[property] === false) {\n            return false;\n        }\n        else if (!options[property]) {\n            return config[property];\n        }\n        else {\n            return true;\n        }\n    };\n    ToastyService.prototype.emitEvent = function (event) {\n        if (this.eventSource) {\n            // Push up a new event\n            this.eventSource.next(event);\n        }\n    };\n    // Allowed THEMES\n    ToastyService.THEMES = ['default', 'material', 'bootstrap'];\n    ToastyService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    ToastyService.ctorParameters = function () { return [\n        { type: ToastyConfig, },\n    ]; };\n    return ToastyService;\n}());\nexport { ToastyService };\n","// Copyright (C) 2016-2017 Sergey Akopkokhyants\n// This project is licensed under the terms of the MIT license.\n// https://github.com/akserg/ng2-toasty\n/**\n * Check and return true if an object is type of string\n * @param obj Analyse has to object the string type\n * @return result of analysis\n */\nexport function isString(obj) {\n    return typeof obj === \"string\";\n}\n/**\n * Check and return true if an object is type of number\n * @param obj Analyse has to object the boolean type\n * @return result of analysis\n */\nexport function isNumber(obj) {\n    return typeof obj === \"number\";\n}\n/**\n * Check and return true if an object is type of Function\n * @param obj Analyse has to object the function type\n * @return result of analysis\n */\nexport function isFunction(obj) {\n    return typeof obj === \"function\";\n}\n","export { Subject } from 'rxjs';\n//# sourceMappingURL=Subject.js.map","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AdvNotificationComponent} from './adv-notification.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdvNotificationComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdvNotificationRoutingModule { }\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-sm-12\\\">\\n    <app-card cardTitle=\\\"Notification Default\\\">\\n      <p>Notification All Options : <code> (click) with option, title, msg, showClose, timeout, position, theme, type</code></p>\\n      <button class=\\\"btn btn-inverse ripple light\\\" (click)=\\\"addToast({title:'Inverse Toasty', msg:'Turning standard Inverse alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'default'})\\\">Default</button>\\n      <button class=\\\"btn btn-info ripple light\\\" (click)=\\\"addToast({title:'Info Toasty', msg:'Turning standard Info alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'info'})\\\">Info</button>\\n      <button class=\\\"btn btn-success ripple light\\\" (click)=\\\"addToast({title:'Success Toasty', msg:'Turning standard Success alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'success'})\\\">Success</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Primary Toasty', msg:'Turning standard Primary alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'wait'})\\\">Primary/Wait</button>\\n      <button class=\\\"btn btn-warning ripple\\\" (click)=\\\"addToast({title:'Warning Toasty', msg:'Turning standard Warning alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'warning'})\\\">Warning</button>\\n      <button class=\\\"btn btn-danger ripple light\\\" (click)=\\\"addToast({title:'Danger Toasty', msg:'Turning standard Danger alerts into awesome notifications', timeout: 5000, theme:'default', position:'bottom-right', type:'error'})\\\">Danger/Error</button>\\n    </app-card>\\n  </div>\\n  <div class=\\\"col-sm-12\\\">\\n    <app-card cardTitle=\\\"Notification Position\\\">\\n      <p>This plugin has layout options where you can display it in any corner of the screen, simply click one layout corners and press the buttons on the other section to see the magic</p>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'top-left', closeOther:true})\\\">Top Left</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'top-right', closeOther:true})\\\">Top Right</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'top-center', closeOther:true})\\\">Top Center</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'bottom-left', closeOther:true})\\\">Bottom Left</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'bottom-right', closeOther:true})\\\">Bottom Right</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'bottom-center', closeOther:true})\\\">Bottom Center</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', showClose: true, timeout: 5000, theme:'bootstrap', type:'wait', position:'center-center', closeOther:true})\\\">Center Center</button>\\n    </app-card>\\n  </div>\\n  <div class=\\\"col-sm-12\\\">\\n    <app-card cardTitle=\\\"Notification Bootstrap\\\">\\n      <p>Change data-type : <code> theme=\\\"bootstrap\\\"</code> to change notification color</p>\\n      <button class=\\\"btn btn-inverse ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'default'})\\\">Default</button>\\n      <button class=\\\"btn btn-info ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'info'})\\\">Info</button>\\n      <button class=\\\"btn btn-success ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'success'})\\\">Success</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'wait'})\\\">Primary/Wait</button>\\n      <button class=\\\"btn btn-warning ripple\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'warning'})\\\">Warning</button>\\n      <button class=\\\"btn btn-danger ripple light\\\" (click)=\\\"addToast({title:'Bootstrap Toasty', msg:'Turning standard Bootstrap alerts into awesome notifications', timeout: 5000, theme:'bootstrap', position:'bottom-right', type:'error'})\\\">Danger/Error</button>\\n    </app-card>\\n  </div>\\n  <div class=\\\"col-sm-12\\\">\\n    <app-card cardTitle=\\\"Notification Material\\\">\\n      <p>Change data-type : <code> theme=\\\"material\\\"</code> to change notification color</p>\\n      <button class=\\\"btn btn-inverse ripple light\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'default'})\\\">Default</button>\\n      <button class=\\\"btn btn-info ripple light\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'info'})\\\">Info</button>\\n      <button class=\\\"btn btn-success ripple light\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'success'})\\\">Success</button>\\n      <button class=\\\"btn btn-primary ripple light\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'wait'})\\\">Primary/Wait</button>\\n      <button class=\\\"btn btn-warning ripple\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'warning'})\\\">Warning</button>\\n      <button class=\\\"btn btn-danger ripple light\\\" (click)=\\\"addToast({title:'Material Toasty', msg:'Turning standard Material alerts into awesome notifications', timeout: 5000, theme:'material', position:'bottom-right', type:'error'})\\\">Danger/Error</button>\\n    </app-card>\\n  </div>\\n</div>\\n<ng2-toasty [position]=\\\"position\\\"></ng2-toasty>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2RlbW8vdWktZWxlbWVudHMvdWktYWR2L2Fkdi1ub3RpZmljYXRpb24vYWR2LW5vdGlmaWNhdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ToastData, ToastOptions, ToastyService} from 'ng2-toasty';\n\n@Component({\n  selector: 'app-adv-notification',\n  templateUrl: './adv-notification.component.html',\n  styleUrls: ['./adv-notification.component.scss']\n})\nexport class AdvNotificationComponent implements OnInit {\n  position = 'bottom-right';\n  title: string;\n  msg: string;\n  showClose = true;\n  theme = 'bootstrap';\n  type = 'default';\n  closeOther = false;\n\n  constructor(private toastyService: ToastyService) { }\n\n  ngOnInit() {\n  }\n\n  addToast(options) {\n    if (options.closeOther) {\n      this.toastyService.clearAll();\n    }\n    this.position = options.position ? options.position : this.position;\n    const toastOptions: ToastOptions = {\n      title: options.title,\n      msg: options.msg,\n      showClose: options.showClose,\n      timeout: options.timeout,\n      theme: options.theme,\n      onAdd: (toast: ToastData) => {\n        /* added */\n      },\n      onRemove: (toast: ToastData) => {\n        /* removed */\n      }\n    };\n\n    switch (options.type) {\n      case 'default': this.toastyService.default(toastOptions); break;\n      case 'info': this.toastyService.info(toastOptions); break;\n      case 'success': this.toastyService.success(toastOptions); break;\n      case 'wait': this.toastyService.wait(toastOptions); break;\n      case 'error': this.toastyService.error(toastOptions); break;\n      case 'warning': this.toastyService.warning(toastOptions); break;\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdvNotificationRoutingModule } from './adv-notification-routing.module';\nimport { AdvNotificationComponent } from './adv-notification.component';\nimport {SharedModule} from '../../../../theme/shared/shared.module';\nimport {ToastyModule} from 'ng2-toasty';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AdvNotificationRoutingModule,\n    SharedModule,\n    ToastyModule.forRoot()\n  ],\n  declarations: [AdvNotificationComponent]\n})\nexport class AdvNotificationModule { }\n"],"sourceRoot":""}